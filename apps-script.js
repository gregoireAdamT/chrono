// SCRIPT GOOGLE APPS SCRIPT POUR CHRONOM√âTRAGE AQUATHLON
// √Ä d√©ployer comme Web App

// ‚ö†Ô∏è IMPORTANT: REMPLACEZ L'ID CI-DESSOUS PAR VOTRE VRAI ID DE GOOGLE SHEET
const SHEET_ID = '1Pmow1wBR3D1paMLNWNDj6mPaPOiFXfw2iAHNkUg6f2A'; // <-- VOTRE ID EST D√âJ√Ä L√Ä !

// CORRECTION CORS: Google Apps Script g√®re automatiquement CORS pour les Web Apps
// Il suffit de s'assurer que le d√©ploiement est accessible √† "Tout le monde"

function doPost(e) {
  try {
    // R√©cup√©rer les donn√©es envoy√©es par les chronos
    const data = JSON.parse(e.postData.contents);
    console.log('Donn√©es re√ßues:', data);
    
    // Initialiser le spreadsheet et les onglets
    const spreadsheet = initSpreadsheet();
    
    // Traiter les donn√©es selon le type
    let departsCount = 0;
    let arriveesCount = 0;
    
    data.records.forEach(record => {
      const row = [
        new Date(record.timestamp),
        record.dossard,
        record.type,
        record.heure,
        data.source || 'chrono',
        new Date() // Timestamp de r√©ception
      ];
      
      // Ajouter √† l'onglet principal (tout)
      const sheetPrincipal = spreadsheet.getSheetByName('Chronos');
      sheetPrincipal.appendRow(row);
      
      // Ajouter aux onglets sp√©cialis√©s
      if (record.type === 'D√©part') {
        const sheetDeparts = spreadsheet.getSheetByName('D√©parts');
        sheetDeparts.appendRow(row);
        departsCount++;
      } else if (record.type === 'Arriv√©e') {
        const sheetArrivees = spreadsheet.getSheetByName('Arriv√©es');
        sheetArrivees.appendRow(row);
        arriveesCount++;
      }
    });
    
    // Log pour debug
    console.log(`Trait√©s: ${data.records.length} records (${departsCount} d√©parts, ${arriveesCount} arriv√©es)`);
    
    // Retourner succ√®s (Apps Script g√®re automatiquement CORS)
    return ContentService
      .createTextOutput(JSON.stringify({
        success: true,
        message: `${data.records.length} records ajout√©s`,
        details: {
          departs: departsCount,
          arrivees: arriveesCount,
          timestamp: new Date().toISOString()
        }
      }))
      .setMimeType(ContentService.MimeType.JSON);
      
  } catch (error) {
    // Log d'erreur d√©taill√©
    console.error('Erreur webhook:', error);
    
    // Retourner erreur
    return ContentService
      .createTextOutput(JSON.stringify({
        success: false,
        error: error.toString(),
        message: 'Erreur lors du traitement des donn√©es',
        sheet_id: SHEET_ID
      }))
      .setMimeType(ContentService.MimeType.JSON);
  }
}

// FONCTION GET pour test simple
function doGet(e) {
  try {
    const spreadsheet = SpreadsheetApp.openById(SHEET_ID);
    
    return ContentService
      .createTextOutput(JSON.stringify({
        success: true,
        message: 'Webhook op√©rationnel',
        sheet_name: spreadsheet.getName(),
        sheet_url: spreadsheet.getUrl(),
        timestamp: new Date().toISOString()
      }))
      .setMimeType(ContentService.MimeType.JSON);
      
  } catch (error) {
    return ContentService
      .createTextOutput(JSON.stringify({
        success: false,
        error: error.toString()
      }))
      .setMimeType(ContentService.MimeType.JSON);
  }
}

// FONCTION SIMPLE POUR FORCER L'AUTORISATION (LANCEZ CELLE-CI D'ABORD)
function autoriserPermissions() {
  try {
    console.log('üîê Test d\'autorisation...');
    
    // Test simple d'acc√®s √† Google Sheets
    const spreadsheet = SpreadsheetApp.openById(SHEET_ID);
    console.log('‚úÖ Spreadsheet accessible:', spreadsheet.getName());
    console.log('üìä URL:', spreadsheet.getUrl());
    
    // Test d'√©criture simple
    let sheet = spreadsheet.getSheetByName('Test');
    if (sheet === null) {
      sheet = spreadsheet.insertSheet('Test');
    }
    
    // √âcrire une cellule de test
    sheet.getRange('A1').setValue('Test autorisation - ' + new Date());
    console.log('‚úÖ √âcriture autoris√©e');
    
    return '‚úÖ PERMISSIONS ACCORD√âES ! Vous pouvez maintenant utiliser les autres fonctions.';
    
  } catch (error) {
    console.error('‚ùå Erreur d\'autorisation:', error);
    
    if (error.toString().includes('Access denied')) {
      return '‚ùå ACC√àS REFUS√â - Suivez les instructions pour autoriser le script';
    } else if (error.toString().includes('Invalid value')) {
      return '‚ùå ID DE SHEET INVALIDE - V√©rifiez que l\'ID est correct';
    } else {
      return `‚ùå ERREUR: ${error.toString()}`;
    }
  }
}

// Fonction pour initialiser le spreadsheet et cr√©er les onglets
function initSpreadsheet() {
  try {
    // Ouvrir le spreadsheet
    const spreadsheet = SpreadsheetApp.openById(SHEET_ID);
    console.log('Spreadsheet ouvert:', spreadsheet.getName());
    
    // Configuration des onglets
    const ONGLETS_CONFIG = [
      { nom: 'Chronos', description: 'Tous les enregistrements' },
      { nom: 'D√©parts', description: 'D√©parts seulement' },
      { nom: 'Arriv√©es', description: 'Arriv√©es seulement' }
    ];
    
    // Cr√©er/v√©rifier chaque onglet
    ONGLETS_CONFIG.forEach(config => {
      let sheet = null;
      
      // Essayer d'obtenir l'onglet existant
      try {
        sheet = spreadsheet.getSheetByName(config.nom);
        console.log(`Onglet '${config.nom}' existe d√©j√†`);
      } catch (e) {
        // L'onglet n'existe pas, le cr√©er avec gestion d'erreur robuste
        console.log(`Cr√©ation de l'onglet '${config.nom}'...`);
        
        try {
          sheet = spreadsheet.insertSheet(config.nom);
          console.log(`Onglet '${config.nom}' cr√©√© avec insertSheet()`);
        } catch (insertError) {
          // Fallback: utiliser insertSheet sans nom puis renommer
          console.log('insertSheet() avec nom a √©chou√©, essai avec m√©thode alternative...');
          sheet = spreadsheet.insertSheet();
          sheet.setName(config.nom);
          console.log(`Onglet '${config.nom}' cr√©√© avec m√©thode alternative`);
        }
      }
      
      // V√©rifier que sheet n'est pas null avant de continuer
      if (!sheet) {
        throw new Error(`Impossible de cr√©er ou d'acc√©der √† l'onglet '${config.nom}'`);
      }
      
      // Configurer les en-t√™tes si n√©cessaire (avec v√©rification suppl√©mentaire)
      try {
        const lastRow = sheet.getLastRow();
        console.log(`Onglet '${config.nom}' - derni√®re ligne: ${lastRow}`);
        
        if (lastRow === 0) {
          setupHeaders(sheet);
          console.log(`En-t√™tes ajout√©s √† '${config.nom}'`);
        } else {
          console.log(`Onglet '${config.nom}' a d√©j√† des donn√©es (${lastRow} lignes)`);
        }
      } catch (headerError) {
        console.error(`Erreur lors de la configuration des en-t√™tes pour '${config.nom}':`, headerError);
        // Essayer de toute fa√ßon d'ajouter les en-t√™tes
        try {
          setupHeaders(sheet);
          console.log(`En-t√™tes ajout√©s √† '${config.nom}' (apr√®s erreur)`);
        } catch (retryError) {
          console.error(`Impossible d'ajouter les en-t√™tes √† '${config.nom}':`, retryError);
        }
      }
    });
    
    return spreadsheet;
    
  } catch (error) {
    console.error('Erreur init spreadsheet:', error);
    throw new Error(`Impossible d'ouvrir le Google Sheet. Erreur: ${error.toString()}`);
  }
}

// Fonction pour configurer les en-t√™tes d'un onglet (version renforc√©e)
function setupHeaders(sheet) {
  try {
    const headers = [
      'Timestamp',
      'N¬∞ Dossard', 
      'Type',
      'Heure',
      'Source',
      'Re√ßu le'
    ];
    
    // Ajouter les en-t√™tes avec v√©rification
    const headerRange = sheet.getRange(1, 1, 1, headers.length);
    headerRange.setValues([headers]);
    console.log('Headers √©crits:', headers);
    
    // Mise en forme des en-t√™tes (avec gestion d'erreur)
    try {
      headerRange.setFontWeight('bold');
      headerRange.setBackground('#4285f4');
      headerRange.setFontColor('white');
      console.log('Mise en forme des en-t√™tes appliqu√©e');
    } catch (formatError) {
      console.log('Mise en forme des en-t√™tes √©chou√©e (pas grave):', formatError);
    }
    
    // Auto-ajuster les colonnes (avec gestion d'erreur)
    try {
      sheet.autoResizeColumns(1, headers.length);
      console.log('Colonnes auto-ajust√©es');
    } catch (resizeError) {
      console.log('Auto-ajustement des colonnes √©chou√© (pas grave):', resizeError);
    }
    
  } catch (error) {
    console.error('Erreur dans setupHeaders:', error);
    throw error;
  }
}

// NOUVELLE FONCTION: Cr√©ation d'onglet pas √† pas pour debug (VERSION CORRIG√âE)
function creerOngletsUnParUn() {
  try {
    const spreadsheet = SpreadsheetApp.openById(SHEET_ID);
    console.log('=== CR√âATION D\'ONGLETS √âTAPE PAR √âTAPE ===');
    
    const onglets = ['Chronos', 'D√©parts', 'Arriv√©es'];
    
    for (let i = 0; i < onglets.length; i++) {
      const nomOnglet = onglets[i];
      console.log(`\n--- Traitement de l'onglet: ${nomOnglet} ---`);
      
      let sheet = null;
      
      // CORRECTION: V√©rifier si l'onglet existe (getSheetByName peut retourner null)
      sheet = spreadsheet.getSheetByName(nomOnglet);
      
      if (sheet !== null) {
        console.log(`‚úÖ Onglet '${nomOnglet}' existe d√©j√†`);
      } else {
        console.log(`üîß Onglet '${nomOnglet}' n'existe pas, cr√©ation...`);
        
        // M√©thode 1: insertSheet avec nom
        try {
          sheet = spreadsheet.insertSheet(nomOnglet);
          if (sheet !== null) {
            console.log(`‚úÖ M√©thode 1 r√©ussie pour '${nomOnglet}'`);
          } else {
            console.log(`‚ùå M√©thode 1: insertSheet a retourn√© null`);
          }
        } catch (e1) {
          console.log(`‚ùå M√©thode 1 √©chou√©e: ${e1}`);
          sheet = null;
        }
        
        // M√©thode 2: insertSheet puis renommer (si m√©thode 1 a √©chou√©)
        if (sheet === null) {
          try {
            sheet = spreadsheet.insertSheet();
            if (sheet !== null) {
              sheet.setName(nomOnglet);
              console.log(`‚úÖ M√©thode 2 r√©ussie pour '${nomOnglet}'`);
            } else {
              console.log(`‚ùå M√©thode 2: insertSheet() a retourn√© null`);
            }
          } catch (e2) {
            console.log(`‚ùå M√©thode 2 √©chou√©e: ${e2}`);
            sheet = null;
          }
        }
        
        // M√©thode 3: Utiliser l'onglet par d√©faut et le renommer (si tout a √©chou√©)
        if (sheet === null && i === 0) { // Premier onglet seulement
          try {
            const sheets = spreadsheet.getSheets();
            console.log(`Onglets existants: ${sheets.length}`);
            if (sheets.length > 0) {
              sheet = sheets[0];
              const ancienNom = sheet.getName();
              sheet.setName(nomOnglet);
              console.log(`‚úÖ M√©thode 3 r√©ussie pour '${nomOnglet}' (renomm√© '${ancienNom}' ‚Üí '${nomOnglet}')`);
            } else {
              console.log(`‚ùå M√©thode 3: Aucun onglet existant trouv√©`);
            }
          } catch (e3) {
            console.log(`‚ùå M√©thode 3 √©chou√©e: ${e3}`);
          }
        }
      }
      
      // V√©rifier que nous avons bien un onglet
      if (sheet === null) {
        console.log(`‚ùå √âCHEC TOTAL: Impossible de cr√©er/acc√©der √† l'onglet '${nomOnglet}'`);
        continue;
      }
      
      console.log(`üîç Test de l'onglet '${nomOnglet}':`);
      console.log(`   - Nom: ${sheet.getName()}`);
      console.log(`   - ID: ${sheet.getSheetId()}`);
      
      // Test getLastRow avec gestion d'erreur
      try {
        const lastRow = sheet.getLastRow();
        console.log(`   - Derni√®re ligne: ${lastRow}`);
        
        // Ajouter les en-t√™tes si n√©cessaire
        if (lastRow === 0) {
          console.log(`üîß Ajout des en-t√™tes √† '${nomOnglet}'`);
          
          const headers = ['Timestamp', 'N¬∞ Dossard', 'Type', 'Heure', 'Source', 'Re√ßu le'];
          sheet.getRange(1, 1, 1, headers.length).setValues([headers]);
          
          console.log(`‚úÖ En-t√™tes ajout√©s √† '${nomOnglet}'`);
        } else {
          console.log(`‚ÑπÔ∏è Onglet '${nomOnglet}' a d√©j√† des donn√©es`);
        }
        
      } catch (rowError) {
        console.log(`‚ùå Erreur getLastRow pour '${nomOnglet}': ${rowError}`);
        
        // Essayer de toute fa√ßon d'√©crire les en-t√™tes
        try {
          const headers = ['Timestamp', 'N¬∞ Dossard', 'Type', 'Heure', 'Source', 'Re√ßu le'];
          sheet.getRange('A1:F1').setValues([headers]);
          console.log(`‚úÖ En-t√™tes ajout√©s par m√©thode alternative √† '${nomOnglet}'`);
        } catch (altError) {
          console.log(`‚ùå √âchec total pour '${nomOnglet}': ${altError}`);
        }
      }
      
      // Petit d√©lai entre les cr√©ations
      Utilities.sleep(1000);
    }
    
    console.log('\n=== R√âSUM√â ===');
    const allSheets = spreadsheet.getSheets();
    console.log(`Nombre total d'onglets: ${allSheets.length}`);
    allSheets.forEach((s, idx) => {
      console.log(`  ${idx + 1}. ${s.getName()} (${s.getLastRow()} lignes)`);
    });
    
    return '‚úÖ Cr√©ation termin√©e - V√©rifiez les logs pour les d√©tails';
    
  } catch (error) {
    console.error('‚ùå Erreur globale:', error);
    return `‚ùå ERREUR: ${error.toString()}`;
  }
}

// Fonction pour initialiser le spreadsheet et cr√©er les onglets (VERSION CORRIG√âE)
function initSpreadsheet() {
  try {
    // Ouvrir le spreadsheet
    const spreadsheet = SpreadsheetApp.openById(SHEET_ID);
    console.log('Spreadsheet ouvert:', spreadsheet.getName());
    
    // Configuration des onglets
    const ONGLETS_CONFIG = [
      { nom: 'Chronos', description: 'Tous les enregistrements' },
      { nom: 'D√©parts', description: 'D√©parts seulement' },
      { nom: 'Arriv√©es', description: 'Arriv√©es seulement' }
    ];
    
    // Cr√©er/v√©rifier chaque onglet
    ONGLETS_CONFIG.forEach(config => {
      let sheet = null;
      
      // CORRECTION: V√©rifier si l'onglet existe (sans try/catch car getSheetByName peut retourner null)
      sheet = spreadsheet.getSheetByName(config.nom);
      
      if (sheet !== null) {
        console.log(`Onglet '${config.nom}' existe d√©j√†`);
      } else {
        // L'onglet n'existe pas, le cr√©er
        console.log(`Cr√©ation de l'onglet '${config.nom}'...`);
        
        try {
          sheet = spreadsheet.insertSheet(config.nom);
          if (sheet === null) {
            // Fallback si insertSheet retourne null
            sheet = spreadsheet.insertSheet();
            if (sheet !== null) {
              sheet.setName(config.nom);
            }
          }
          console.log(`Onglet '${config.nom}' cr√©√©`);
        } catch (insertError) {
          console.error(`Erreur cr√©ation onglet '${config.nom}':`, insertError);
          // Essayer m√©thode alternative
          try {
            sheet = spreadsheet.insertSheet();
            if (sheet !== null) {
              sheet.setName(config.nom);
              console.log(`Onglet '${config.nom}' cr√©√© avec m√©thode alternative`);
            }
          } catch (altError) {
            console.error(`√âchec complet pour '${config.nom}':`, altError);
            throw new Error(`Impossible de cr√©er l'onglet '${config.nom}'`);
          }
        }
      }
      
      // V√©rifier que sheet n'est pas null avant de continuer
      if (sheet === null) {
        throw new Error(`L'onglet '${config.nom}' est null apr√®s cr√©ation`);
      }
      
      // Configurer les en-t√™tes si n√©cessaire (avec v√©rification suppl√©mentaire)
      try {
        const lastRow = sheet.getLastRow();
        console.log(`Onglet '${config.nom}' - derni√®re ligne: ${lastRow}`);
        
        if (lastRow === 0) {
          setupHeaders(sheet);
          console.log(`En-t√™tes ajout√©s √† '${config.nom}'`);
        } else {
          console.log(`Onglet '${config.nom}' a d√©j√† des donn√©es (${lastRow} lignes)`);
        }
      } catch (headerError) {
        console.error(`Erreur lors de la configuration des en-t√™tes pour '${config.nom}':`, headerError);
        // Essayer de toute fa√ßon d'ajouter les en-t√™tes
        try {
          setupHeaders(sheet);
          console.log(`En-t√™tes ajout√©s √† '${config.nom}' (apr√®s erreur)`);
        } catch (retryError) {
          console.error(`Impossible d'ajouter les en-t√™tes √† '${config.nom}':`, retryError);
          // Ne pas faire √©chouer tout le processus pour √ßa
        }
      }
    });
    
    return spreadsheet;
    
  } catch (error) {
    console.error('Erreur init spreadsheet:', error);
    throw new Error(`Impossible d'initialiser le Google Sheet. Erreur: ${error.toString()}`);
  }
}

// FONCTION ALTERNATIVE: Cr√©er les onglets manuellement un par un
function creerOngletManuel(nomOnglet) {
  try {
    const spreadsheet = SpreadsheetApp.openById(SHEET_ID);
    console.log(`=== CR√âATION MANUELLE DE L'ONGLET: ${nomOnglet} ===`);
    
    // V√©rifier s'il existe d√©j√†
    let sheet = spreadsheet.getSheetByName(nomOnglet);
    
    if (sheet !== null) {
      console.log(`‚úÖ L'onglet '${nomOnglet}' existe d√©j√†`);
      return sheet;
    }
    
    // Cr√©er l'onglet
    console.log(`üîß Cr√©ation de l'onglet '${nomOnglet}'...`);
    sheet = spreadsheet.insertSheet(nomOnglet);
    
    if (sheet === null) {
      throw new Error(`insertSheet a retourn√© null pour '${nomOnglet}'`);
    }
    
    console.log(`‚úÖ Onglet '${nomOnglet}' cr√©√© avec succ√®s`);
    
    // Ajouter les en-t√™tes
    const headers = ['Timestamp', 'N¬∞ Dossard', 'Type', 'Heure', 'Source', 'Re√ßu le'];
    sheet.getRange(1, 1, 1, headers.length).setValues([headers]);
    console.log(`‚úÖ En-t√™tes ajout√©s √† '${nomOnglet}'`);
    
    return sheet;
    
  } catch (error) {
    console.error(`‚ùå Erreur cr√©ation '${nomOnglet}':`, error);
    throw error;
  }
}

// FONCTION POUR CR√âER LES 3 ONGLETS UN PAR UN
function creerTousLesOnglets() {
  const onglets = ['Chronos', 'D√©parts', 'Arriv√©es'];
  const resultats = [];
  
  for (const nom of onglets) {
    try {
      const sheet = creerOngletManuel(nom);
      resultats.push(`‚úÖ ${nom}: OK`);
    } catch (error) {
      resultats.push(`‚ùå ${nom}: ${error.toString()}`);
    }
  }
  
  console.log('=== R√âSULTATS ===');
  resultats.forEach(r => console.log(r));
  
  return resultats.join('\n');
}

// Fonction pour tester le script manuellement
function testerScript() {
  try {
    console.log('=== D√âBUT DU TEST ===');
    
    // Tester l'initialisation du spreadsheet
    const spreadsheet = initSpreadsheet();
    console.log('‚úÖ Spreadsheet initialis√© avec succ√®s');
    
    // Donn√©es de test
    const testData = {
      timestamp: new Date().toISOString(),
      records: [
        {
          id: 1,
          dossard: '001',
          type: 'D√©part',
          heure: '10:00:15',
          timestamp: Date.now()
        },
        {
          id: 2,
          dossard: '001',
          type: 'Arriv√©e',
          heure: '10:25:30',
          timestamp: Date.now() + 1000000
        }
      ],
      source: 'test_manuel'
    };
    
    // Simuler un POST request
    const mockEvent = {
      postData: {
        contents: JSON.stringify(testData)
      }
    };
    
    const result = doPost(mockEvent);
    console.log('‚úÖ Test r√©ussi !');
    console.log('R√©sultat:', result.getContent());
    
    return '‚úÖ TOUT FONCTIONNE !';
    
  } catch (error) {
    console.error('‚ùå Erreur de test:', error);
    return `‚ùå ERREUR: ${error.toString()}`;
  }
}

// Fonction d'initialisation manuelle (pour forcer la cr√©ation des onglets)
function initialiserOnglets() {
  try {
    const spreadsheet = initSpreadsheet();
    console.log('‚úÖ Onglets initialis√©s avec succ√®s');
    console.log('üìä Acc√©dez √† votre Google Sheet:', spreadsheet.getUrl());
    return spreadsheet.getUrl();
  } catch (error) {
    console.error('‚ùå Erreur initialisation:', error);
    throw error;
  }
}

// NOUVELLE FONCTION: Diagnostic complet
function diagnosticComplet() {
  console.log('=== DIAGNOSTIC COMPLET ===');
  console.log('SHEET_ID:', SHEET_ID);
  console.log('User email:', Session.getActiveUser().getEmail());
  
  try {
    // Test 1: Acc√®s de base
    const spreadsheet = SpreadsheetApp.openById(SHEET_ID);
    console.log('‚úÖ Test 1 - Acc√®s de base: OK');
    console.log('   Nom:', spreadsheet.getName());
    console.log('   URL:', spreadsheet.getUrl());
    
    // Test 2: Lecture
    const sheets = spreadsheet.getSheets();
    console.log('‚úÖ Test 2 - Lecture: OK');
    console.log('   Nombre d\'onglets:', sheets.length);
    
    // Test 3: √âcriture
    const firstSheet = sheets[0];
    firstSheet.getRange('A1').setValue('Test diagnostic - ' + new Date());
    console.log('‚úÖ Test 3 - √âcriture: OK');
    
    return '‚úÖ TOUS LES TESTS SONT PASS√âS !';
    
  } catch (error) {
    console.error('‚ùå Diagnostic √©chou√©:', error);
    
    if (error.toString().includes('Permission denied')) {
      console.log('üí° SOLUTION: Ex√©cutez la fonction "autoriserPermissions" d\'abord');
    } else if (error.toString().includes('Invalid value')) {
      console.log('üí° SOLUTION: V√©rifiez que l\'ID du Google Sheet est correct');
    }
    
    return `‚ùå √âCHEC: ${error.toString()}`;
  }
}